from domain.sanitizers.sanitized_list import sanitize_list


def how_to_wrapper(query, callback, logging):
    """
    A wrapper's job is to return a function with the signature used by the LLM to extract entities from the query. The
    parameters of the wrapper are captured by the returned function without altering the signature of the function.

    The purpose of the wrapped function is to take the entities passed in by the LLM, generate the messages passed
    to the LLM, and call a callback with the extracted entities and the custom messages that explain how to the context
    generated by the entities.

    The callback is then responsible for building the context, passing the messages to the LLM, and returning the result.

    The callback is specific to the type of system calling this agent. For example, the chat interface requires the agent
    to build the context by calling an Octopus instance. The Chrome extension will pass the context in the body of the
    request. Tests will build the context from an ephemeral instance of Octopus. Abstracting the details of how the
    context is built allows the process of extracting entities and building messages to be shared, while building
    context is implementation specific.
    """

    def how_to_usage(keywords=None, **kwargs):
        """Answers any question on how or where to create, use, add, remove, setup, enable, disable, configure, find, etc.
        Octopus Deploy features like Projects, Environments, Lifecycles, Channels, Deployments, Releases,
        Deployment Processes, Variables, Lifecycle Events, Integrations, Retention Policies, Security,
        Audit Logs, Targets, Machines, Agents, Authentication, Tentacles, SSH, Step Templates, Licenses,
        Metrics, DORA, etc. This function also answers questions about the use of the CLI, code samples, REST API,
        and explanations of high level concepts.

        Args:
        keywords: The keywords extracted from the query
        """

        if logging:
            logging("Enter:", "how_to_usage")

        for key, value in kwargs.items():
            if logging:
                logging(f"Unexpected Key: {key}", "Value: {value}")

        # This is just a passthrough to the original callback
        return callback(query, sanitize_list(keywords))

    return how_to_usage
