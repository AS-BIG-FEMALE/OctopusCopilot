from domain.messages.deployments_and_releases import build_deployments_and_releases_prompt


def answer_releases_and_deployments_wrapper(original_query, callback, logging=None):
    """
    A wrapper's job is to return a function with the signature used by the LLM to extract entities from the query. The
    parameters of the wrapper are captured by the returned function without altering the signature of the function.

    The purpose of the wrapped function is to take the entities passed in by the LLM, generate the messages passed
    to the LLM, and call a callback with the extracted entities and the custom messages that explain how to the context
    generated by the entities.

    The callback is then responsible for building the context, passing the messages to the LLM, and returning the result.

    The callback is specific to the type of system calling this agent. For example, the chat interface requires the agent
    to build the context by calling an Octopus instance. The Chrome extension will pass the context in the body of the
    request. Tests will build the context from an ephemeral instance of Octopus. Abstracting the details of how the
    context is built allows the process of extracting entities and building messages to be shared, while building
    context is implementation specific.
    """

    def answer_releases_and_deployments_usage(space=None, projects=None, environments=None, channels=None,
                                              releases=None, **kwargs):
        """Answers a question about deployments and releases.

        Args:
        space: Space name
        projects: project names
        environments: variable names
        channels: chanel names
        releases: release versions
        """

        if logging:
            logging("Enter:", "answer_releases_and_deployments_usage")

        # Build a few shot sample query with a chain-of-thought example to help the LLM understand the relationships
        # between projects, releases, deployments, and environments.

        # Then use a tree-of-thought prompt to get a consensus answer:
        # https://github.com/dave1010/tree-of-thought-prompting/blob/main/tree-of-thought-prompts.txt

        few_shot = """
Sample Question 1: What is the release version of the latest deployment of the "My Project" project to the "MyEnvironment" environment for the "MyChannel" channel and the "My Tenant" tenant in the "Demo" space?

Sample JSON 1: ###
{{
    "Deployments": [
        {{
            "SpaceId": "Spaces-345",
            "ReleaseVersion": "2.0.1",
            "ProjectId": "Projects-91234",
            "TenantId": "Tenants-9234",
            "ReleaseId": "Releases-13568",
            "EnvironmentId": "Environments-76534",
            "DeploymentId": "Deployments-16435",
            "ChannelId": "Channels-97001",
            "Created": "2024-03-13T04:07:59.537+00:00",
            "TaskState": "Success",
            "TaskDuration": "2 minutes"
        }},
        {{
            "SpaceId": "Spaces-345",
            "ProjectId": "Projects-91234",
            "EnvironmentId": "Environments-96789",
            "ReleaseId": "Releases-13568",
            "DeploymentId": "Deployments-26435",
            "TenantId": "Tenants-9234",
            "ChannelId": "Channels-97001",
            "ReleaseVersion": "1.2.3-mybranch",
            "Created": "2024-03-13T04:07:59.537+00:00",
            "TaskState": "Success",
            "TaskDuration": "2 minutes"
          }}
    ]
}}

###
Sample HCL 1: ###
resource "octopusdeploy_space" "octopus_space_demo_space" {{
  id                          = "Spaces-345"
  description                 = "A demonstration space"
  name                        = "Demo"
}}
resource "octopusdeploy_environment" "theenvironmentresource" {{
  id                           = "Environments-96789"
  name                         = "MyEnvironment"
  space_id                     = "${{octopusdeploy_space.octopus_space_demo_space.id}}"
}}
resource "octopusdeploy_project" "theprojectresource" {{
    id = "Projects-91234"
    name = "My Project"
    space_id = "${{octopusdeploy_space.octopus_space_demo_space.id}}"
}}
resource "octopusdeploy_tenant" "thetennatresource" {{
  id = "Tenants-9234"
  name = "My Tenant"
  space_id = "${{octopusdeploy_space.octopus_space_demo_space.id}}"
}}
resource "octopusdeploy_channel" "thechannelresource" {{
  id = "Channels-97001"
  name = "MyChannel"
  space_id = "${{octopusdeploy_space.octopus_space_demo_space.id}}"
}}
###

Sample Answer 1:
The HCL resource with the labels "octopusdeploy_space" and "octopus_space_demo_space" has an attribute called "name" with the value "Demo" an an "id" attribute of "Spaces-345". This name matches the space name in the query. Therefore, we must find deployments with the "SpaceId" of "Spaces-345".
The HCL resource with the labels "octopusdeploy_environment" and "theenvironmentresource" has an attribute called "name" with the value "MyEnvironment" an an "id" attribute of "Environments-96789". This name matches the environment name in the query. Therefore, we must find deployments with the "EnvironmentId" of "Environments-96789".
The HCL resource with the labels "octopusdeploy_project" and "theprojectresource" has an attribute called "name" with the value "My Project" and "id" attribute of "Projects-91234". This name matches the project name in the query. Therefore, we must find deployments with the "ProjectId" of "Projects-91234".
The HCL resource with the labels "octopusdeploy_tenant" and "thetennatresource" has an attribute called "name" with the value "My Tenant" and an "id" attribute of "Tenants-9234". This name matches the tenant name in the query. Therefore, we must find deployments with the "TenantId" of "Tenants-9234".
The HCL resource with the labels "octopusdeploy_channel" and "thechannelresource" has an attribute called "name" with the value "MyChannel" and an "id" attribute of "Channels-97001". This name matches the channel name in the query. Therefore, we must find deployments with the "ChannelId" of "Channels-97001"
We filter the JSON array of called "Deployments" for a deployment with a "ProjectId" attribute with the value of "Projects-91234", an "EnvironmentId" attribute with the value of "Environments-96789", a "TenantId" attribute with the value of "Tenants-9234", a "ChannelId" attribute with the value of "Channels-97001", and a "SpaceId" attribute with the value of "Spaces-345".
The deployment with the highest "Created" attribute is the latest deployment.
The release version is found in the deployment "ReleaseVersion" attribute.
Therefore, the release version of the latest deployment of the "My Project" project to the "MyEnvironment" environment is "1.2.3-mybranch".

The release version of the latest deployment of the "My Project" project to the "MyEnvironment" environment is "1.2.3-mybranch"
"""

        for key, value in kwargs.items():
            if logging:
                logging(f"Unexpected Key: {key}", "Value: {value}")

        messages = build_deployments_and_releases_prompt([("user", few_shot)])

        return callback(original_query, messages, space, projects, environments, channels, releases)

    return answer_releases_and_deployments_usage
