# The following workflow provides an opinionated template you can customize for your own needs.
#
# If you are not an Octopus user, the "Push to Octopus", "Generate Octopus Deploy build information",
# and "Create Octopus Release" steps can be safely deleted.
#
# To configure Octopus, set the OCTOPUS_API_TOKEN secret to the Octopus API key, and
# set the OCTOPUS_SERVER_URL secret to the Octopus URL.
#
# Double check the "project" and "deploy_to" properties in the "Create Octopus Release" step
# match your Octopus projects and environments.
#
# Get a trial Octopus instance from https://octopus.com/start

name: Python Build
'on':
  workflow_dispatch: { }
  push: { }
  schedule:
    - cron: '0 0 * * *'
jobs:
  build:
    runs-on:
      group: ubuntu-large-runner
      labels: 4core-ubuntu-runner
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # Need 3.11 because of https://stackoverflow.com/questions/77364550/attributeerror-module-pkgutil-has-no-attribute-impimporter-did-you-mean
          python-version: 3.11
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: 5.x
      - id: determine_version
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.15
        with:
          additionalArguments: /overrideconfig mode=Mainline
      - name: Install tools
        run: |
          pip install pytest coverage setuptools radon
          sudo apt-get install -y pycodestyle
      - name: Linting
        shell: bash
        run: find . -path ./domain/sanitizers/stringlifier -prune -o -path ./venv -prune -o -name "*.py" -print0 | xargs -0 -n1 pycodestyle --ignore=E501,W503
      - name: Complexity
        shell: bash
        run: find . -path ./domain/sanitizers/stringlifier -prune -o -path ./venv -prune -o -path ./.venv -prune -o -name "*.py" -print0 | xargs -0 -n1 radon cc -nc
      - name: Install Dependencies
        run: pip install -r requirements.txt
        shell: bash
      - name: List Dependencies
        run: pip install pipdeptree; pipdeptree > dependencies.txt
        shell: bash
      - name: Collect Dependencies
        uses: actions/upload-artifact@v2
        with:
          name: Dependencies
          path: dependencies.txt
      - name: List Dependency Updates
        run: pip list --outdated --format=freeze > dependencyUpdates.txt || true
        shell: bash
      - name: Collect Dependency Updates
        uses: actions/upload-artifact@v2
        with:
          name: Dependencies Updates
          path: dependencyUpdates.txt
      - uses: robinraju/release-downloader@v1.9
        with:
          repository: "OctopusSolutionsEngineering/OctopusTerraformExport"
          latest: true
          fileName: "octoterra_linux_amd64_azure.zip"
      - name: Start Azurite
        run: docker run -d -p 10000:10000 -p 10001:10001 -p 10002:10002 mcr.microsoft.com/azure-storage/azurite
        shell: bash
      - name: Start Octoterra
        run: |
          # Start the octoterra microservice
          mkdir octoterra
          mv octoterra_linux_amd64_azure.zip octoterra
          cd octoterra
          unzip octoterra_linux_amd64_azure.zip
          chmod +x octoterra_linux_amd64_azure
          ./octoterra_linux_amd64_azure &
        env:
          # The port used when running the octoterra microservice
          FUNCTIONS_CUSTOMHANDLER_PORT: 8081
        shell: bash
      # Requires OpenAI instance to allow GitHub runner's IP address
      - name: Test
        run: |
          pip install pytest coverage setuptools
          PYTHONPATH=$(pwd) coverage run -m pytest --junitxml=results.xml
          coverage html
        env:
          # These are the connection details to Azure OpenAI
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_ENDPOINT: ${{ secrets.OPENAI_ENDPOINT }}
          OPENAI_API_DEPLOYMENT: ${{ secrets.OPENAI_API_DEPLOYMENT }}
          # This is a base 64 encoded version of the Octopus license
          LICENSE: ${{ secrets.OCTOPUS_LICENSE }}
          # This is the slack webhook used to send messages
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          # This is the connection string to Azurite, the test Aure Storage emulator
          AzureWebJobsStorage: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;
          # This is the list of admin users
          APPLICATION_USERS_ADMIN: "[160104]"
          # This is the test user that is used to simulate a login
          TEST_GH_USER: "160104"
          # This is the GitHub token passed to the chat tests
          GH_TEST_TOKEN: ${{ secrets.GH_TEST_TOKEN }}
          # This is the encryption salt used when saving encrypted values to Azure Storage
          ENCRYPTION_PASSWORD: password
          # This is the encryption salt used when saving encrypted values to Azure Storage
          ENCRYPTION_SALT: salt
          # The location of the octoterra microservice
          APPLICATION_OCTOTERRA_URL: http://localhost:8081
        shell: bash
      - name: Coverage Badge
        uses: tj-actions/coverage-badge-py@v2
      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v17
        id: verify-changed-files
        with:
          files: coverage.svg

      - name: Commit files
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add coverage.svg
          git commit -m "Updated coverage.svg"

      - name: Push changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        continue-on-error: true
        with:
          github_token: ${{ secrets.github_token }}
          branch: ${{ github.ref }}
      - name: Collect Dependencies
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Coverage Report
          path: htmlcov
      - if: always()
        name: Report
        uses: dorny/test-reporter@v1
        with:
          name: Python Tests
          path: results.xml
          reporter: java-junit
          fail-on-error: 'false'
      - name: Generate SBOM
        run: |
          python -m pip install cyclonedx-bom
          cyclonedx-py  environment > bom.json
        shell: bash
      #      - name: Set up QEMU
      #        uses: docker/setup-qemu-action@v3
      #      - name: Set up Docker Buildx
      #        uses: docker/setup-buildx-action@v3
      #      - name: Login to Docker Hub
      #        uses: docker/login-action@v3
      #        with:
      #          username: ${{ secrets.DOCKERHUB_USERNAME }}
      #          password: ${{ secrets.DOCKERHUB_TOKEN }}
      #      - name: Build and push
      #        uses: docker/build-push-action@v5
      #        with:
      #          push: true
      #          tags: octopussamples/octopuscopilot:latest
      - name: Package
        run: |-
          zip -R OctopusCopilot.${{ steps.determine_version.outputs.semVer }}.zip \
            '*.py' \
            '*.pyc' \
            '*.html' \
            '*.htm' \
            '*.css' \
            '*.js' \
            '*.min' \
            '*.map' \
            '*.sql' \
            '*.png' \
            '*.jpg' \
            '*.jpeg' \
            '*.gif' \
            '*.json' \
            '*.env' \
            '*.txt' \
            '*.Procfile' \
            -x "octoterra/*" \
            -x "**/__pycache__/*" \
            -x ".vscode/*" \
            -x "tests/*" \
        shell: bash
      - name: Tag Release
        uses: mathieudutour/github-tag-action@v6.1
        with:
          custom_tag: ${{ steps.determine_version.outputs.semVer }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - id: create_release
        name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_version.outputs.semVer }}+run${{ github.run_number }}-attempt${{ github.run_attempt }}
          release_name: Release ${{ steps.determine_version.outputs.semVer }} Run ${{ github.run_number }} Attempt ${{ github.run_attempt }}
          draft: ${{ github.ref == 'refs/heads/main' && 'false' || 'true' }}
          name: Release ${{ steps.determine_version.outputs.semVer }} Run ${{ github.run_number }} Attempt ${{ github.run_attempt }}
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_version.outputs.semVer }}+run${{ github.run_number }}-attempt${{ github.run_attempt }}
          files: OctopusCopilot.${{ steps.determine_version.outputs.semVer }}.zip
      - name: Push packages to Octopus Deploy
        uses: OctopusDeploy/push-package-action@v3
        env:
          OCTOPUS_API_KEY: ${{ secrets.COPILOT_OCTOPUS_API }}
          OCTOPUS_URL: ${{ secrets.COPILOT_OCTOPUS_URL }}
          OCTOPUS_SPACE: ${{ secrets.COPILOT_OCTOPUS_SPACE }}
        with:
          packages: OctopusCopilot.${{ steps.determine_version.outputs.semVer }}.zip
          overwrite_mode: OverwriteExisting
      - name: Create Octopus Release
        uses: OctopusDeploy/create-release-action@v3
        env:
          OCTOPUS_API_KEY: ${{ secrets.COPILOT_OCTOPUS_API }}
          OCTOPUS_URL: ${{ secrets.COPILOT_OCTOPUS_URL }}
          OCTOPUS_SPACE: ${{ secrets.COPILOT_OCTOPUS_SPACE }}
        with:
          project: Octopus Copilot Function
          packages: OctopusCopilot:${{ steps.determine_version.outputs.semVer }}
          release_number: ${{ steps.determine_version.outputs.semVer }}+run${{ github.run_number }}-attempt${{ github.run_attempt }}
permissions:
  id-token: write
  checks: write
  contents: write
